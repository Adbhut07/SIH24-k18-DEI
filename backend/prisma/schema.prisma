generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CANDIDATE
  INTERVIEWER
  ADMIN
}

enum QuestionType {
  WRITTEN
  VERBAL
}

enum InterviewStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

enum InterviewType {
  HUMAN_LED
  AI_DRIVEN
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  name       String
  email      String    @unique
  password   String
  role       Role
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  interviewsAsCandidate    Interview[] @relation("CandidateInterviews")
  interviewsAsInterviewer  Interview[] @relation("InterviewerInterviews")
  answers                  Answer[]    @relation("CandidateAnswers")
}

model Interview {
  id             String          @id @default(uuid()) @db.Uuid
  title          String
  description    String?
  scheduledAt    DateTime
  type           InterviewType   @default(AI_DRIVEN)
  usePredefined  Boolean         @default(false)     
  status         InterviewStatus @default(SCHEDULED)  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  // Relations
  candidateId    String          @db.Uuid
  candidate      User            @relation("CandidateInterviews", fields: [candidateId], references: [id])
  interviewerId  String?         @db.Uuid
  interviewer    User?           @relation("InterviewerInterviews", fields: [interviewerId], references: [id])
  askedQuestions AskedQuestion[]  
}

model Question {
  id        String       @id @default(uuid()) @db.Uuid
  text      String
  level     String
  topic     String
  type      QuestionType
  metadata  Json?     
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  askedQuestions AskedQuestion[]  
}

model AskedQuestion {
  id          String    @id @default(uuid()) @db.Uuid
  interviewId String    @db.Uuid
  interview   Interview @relation(fields: [interviewId], references: [id])
  questionId  String?   @db.Uuid      
  question    Question? @relation(fields: [questionId], references: [id])
  isAiDriven  Boolean   @default(false)
  text        String        
  createdAt   DateTime  @default(now())

  answers     Answer[]     
}

model Answer {
  id              String        @id @default(uuid()) @db.Uuid
  askedQuestionId String        @db.Uuid
  askedQuestion   AskedQuestion @relation(fields: [askedQuestionId], references: [id])
  candidateId     String        @db.Uuid
  candidate       User          @relation("CandidateAnswers", fields: [candidateId], references: [id]) 
  text            String?      
  audioUrl        String?      
  createdAt       DateTime      @default(now())
}